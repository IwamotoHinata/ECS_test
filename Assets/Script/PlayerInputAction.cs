//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Script/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Head"",
            ""id"": ""14f9b13d-4b72-4676-855a-9c96f6aa925b"",
            ""actions"": [
                {
                    ""name"": ""Postion"",
                    ""type"": ""Value"",
                    ""id"": ""93da7191-f26a-42f5-851f-4f9e4bc7d33b"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""a5267c5f-b651-4bbd-8e73-c9572d3aa2ca"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""333838cb-e75c-4a31-86ba-f03412b93f80"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Postion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb8efeae-b5f2-4e71-89b5-5b24d9324542"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""85eaf909-a68d-4641-8d23-bf28cb385427"",
            ""actions"": [
                {
                    ""name"": ""Postion"",
                    ""type"": ""Value"",
                    ""id"": ""57dff01a-1828-4d36-91ea-42561f822948"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""602f961a-8990-4a19-86a4-ddbb54c9ad4a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36a5c2f8-70a4-4c0b-a78c-b3569ec11e36"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Postion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b55bb95a-e1ad-4bad-a4f8-6eed5d1af446"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""f158f7f2-a4e7-417e-94ec-3faf1fbaa62b"",
            ""actions"": [
                {
                    ""name"": ""Postion"",
                    ""type"": ""Value"",
                    ""id"": ""a87862e4-cf55-419c-aab9-dc0d1d331108"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""1ed6dd5b-ae09-4b76-85cc-78bcffe1b1f0"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1de99dd-a8a6-42f4-9dfe-eea7aa27922c"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Postion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad7e9369-abb4-4520-be98-b9c9bc9ba02f"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHandLocomotion"",
            ""id"": ""f277fd22-fa64-4c6e-be24-672c4057ae2c"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""bb1ef571-3c00-472c-b907-8f2e97273699"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05d0473b-d6fe-4869-b1e9-0b3e9ac56ee1"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5602085c-46b7-47f2-a3dc-44c7687543b4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHandLocomotion"",
            ""id"": ""0259e949-8859-45b6-a4e7-2446ddcc801e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e417b954-0a1e-4f6c-9e0e-3a6cf2b56b6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1328f8c7-2aa8-4541-b392-07df51d61684"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyBoard"",
                    ""id"": ""196ad1b4-2dcc-4c3b-a2ae-e82396c8cbfd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1867322c-fe22-4a09-8669-7f16cfda4538"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cc1d7878-26b3-4101-83b9-7477fedec5a4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e14d2777-9a91-4ac4-af0f-0e79a9ed78d1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6ed36bf2-df92-4132-a0a3-c48bc4027114"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RightHandInterction"",
            ""id"": ""ee65077b-d18b-492f-ab40-4a6dd1e89862"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a14ce5ce-4f61-4691-bb92-f7a1a7059886"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""5b204e7b-e5aa-4db1-90f2-7f14fa1e9474"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UIPress"",
                    ""type"": ""Button"",
                    ""id"": ""28e56423-9514-45bb-8eaf-2fa3a5825200"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0867df77-e95e-4313-94c1-ab0fbdd6fc48"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75e962da-b51e-475e-b286-a8d7603377a1"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7987c990-59e8-48d7-97a3-b9c29239c387"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5c8291c-7484-4907-9067-ac095f6df2ca"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf394b0b-4e67-4d4f-83b2-f65ca202b6ff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3c45e27-29f3-48ec-bf55-0823365e178f"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHandInterction"",
            ""id"": ""6d0bad4d-13a9-489b-bbd3-76cb861886a8"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""efde88f0-acf9-4372-b581-1336acd3ece0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""033df1a9-7bdd-491c-8021-a270e59435b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UIPress"",
                    ""type"": ""Button"",
                    ""id"": ""0213e504-7a2b-4bd2-bf64-9ba24681ad40"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd0b5866-448a-4549-9311-f67575f48546"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a052cc22-a16e-4e3b-a681-699c8334206a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1992e774-4281-4e87-ad93-db350fb6f846"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f71b569-138c-4d70-9eea-654a7ea633b7"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_Postion = m_Head.FindAction("Postion", throwIfNotFound: true);
        m_Head_Rotation = m_Head.FindAction("Rotation", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_Postion = m_RightHand.FindAction("Postion", throwIfNotFound: true);
        m_RightHand_rotation = m_RightHand.FindAction("rotation", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Postion = m_LeftHand.FindAction("Postion", throwIfNotFound: true);
        m_LeftHand_rotation = m_LeftHand.FindAction("rotation", throwIfNotFound: true);
        // RightHandLocomotion
        m_RightHandLocomotion = asset.FindActionMap("RightHandLocomotion", throwIfNotFound: true);
        m_RightHandLocomotion_Turn = m_RightHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        // LeftHandLocomotion
        m_LeftHandLocomotion = asset.FindActionMap("LeftHandLocomotion", throwIfNotFound: true);
        m_LeftHandLocomotion_Move = m_LeftHandLocomotion.FindAction("Move", throwIfNotFound: true);
        // RightHandInterction
        m_RightHandInterction = asset.FindActionMap("RightHandInterction", throwIfNotFound: true);
        m_RightHandInterction_Select = m_RightHandInterction.FindAction("Select", throwIfNotFound: true);
        m_RightHandInterction_Activate = m_RightHandInterction.FindAction("Activate", throwIfNotFound: true);
        m_RightHandInterction_UIPress = m_RightHandInterction.FindAction("UIPress", throwIfNotFound: true);
        m_RightHandInterction_Jump = m_RightHandInterction.FindAction("Jump", throwIfNotFound: true);
        // LeftHandInterction
        m_LeftHandInterction = asset.FindActionMap("LeftHandInterction", throwIfNotFound: true);
        m_LeftHandInterction_Select = m_LeftHandInterction.FindAction("Select", throwIfNotFound: true);
        m_LeftHandInterction_Activate = m_LeftHandInterction.FindAction("Activate", throwIfNotFound: true);
        m_LeftHandInterction_UIPress = m_LeftHandInterction.FindAction("UIPress", throwIfNotFound: true);
    }

    ~@PlayerInputAction()
    {
        UnityEngine.Debug.Assert(!m_Head.enabled, "This will cause a leak and performance issues, PlayerInputAction.Head.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightHand.enabled, "This will cause a leak and performance issues, PlayerInputAction.RightHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftHand.enabled, "This will cause a leak and performance issues, PlayerInputAction.LeftHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightHandLocomotion.enabled, "This will cause a leak and performance issues, PlayerInputAction.RightHandLocomotion.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftHandLocomotion.enabled, "This will cause a leak and performance issues, PlayerInputAction.LeftHandLocomotion.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightHandInterction.enabled, "This will cause a leak and performance issues, PlayerInputAction.RightHandInterction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftHandInterction.enabled, "This will cause a leak and performance issues, PlayerInputAction.LeftHandInterction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Head
    private readonly InputActionMap m_Head;
    private List<IHeadActions> m_HeadActionsCallbackInterfaces = new List<IHeadActions>();
    private readonly InputAction m_Head_Postion;
    private readonly InputAction m_Head_Rotation;
    public struct HeadActions
    {
        private @PlayerInputAction m_Wrapper;
        public HeadActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Postion => m_Wrapper.m_Head_Postion;
        public InputAction @Rotation => m_Wrapper.m_Head_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void AddCallbacks(IHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadActionsCallbackInterfaces.Add(instance);
            @Postion.started += instance.OnPostion;
            @Postion.performed += instance.OnPostion;
            @Postion.canceled += instance.OnPostion;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IHeadActions instance)
        {
            @Postion.started -= instance.OnPostion;
            @Postion.performed -= instance.OnPostion;
            @Postion.canceled -= instance.OnPostion;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadActions @Head => new HeadActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private List<IRightHandActions> m_RightHandActionsCallbackInterfaces = new List<IRightHandActions>();
    private readonly InputAction m_RightHand_Postion;
    private readonly InputAction m_RightHand_rotation;
    public struct RightHandActions
    {
        private @PlayerInputAction m_Wrapper;
        public RightHandActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Postion => m_Wrapper.m_RightHand_Postion;
        public InputAction @rotation => m_Wrapper.m_RightHand_rotation;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Add(instance);
            @Postion.started += instance.OnPostion;
            @Postion.performed += instance.OnPostion;
            @Postion.canceled += instance.OnPostion;
            @rotation.started += instance.OnRotation;
            @rotation.performed += instance.OnRotation;
            @rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IRightHandActions instance)
        {
            @Postion.started -= instance.OnPostion;
            @Postion.performed -= instance.OnPostion;
            @Postion.canceled -= instance.OnPostion;
            @rotation.started -= instance.OnRotation;
            @rotation.performed -= instance.OnRotation;
            @rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private List<ILeftHandActions> m_LeftHandActionsCallbackInterfaces = new List<ILeftHandActions>();
    private readonly InputAction m_LeftHand_Postion;
    private readonly InputAction m_LeftHand_rotation;
    public struct LeftHandActions
    {
        private @PlayerInputAction m_Wrapper;
        public LeftHandActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Postion => m_Wrapper.m_LeftHand_Postion;
        public InputAction @rotation => m_Wrapper.m_LeftHand_rotation;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Add(instance);
            @Postion.started += instance.OnPostion;
            @Postion.performed += instance.OnPostion;
            @Postion.canceled += instance.OnPostion;
            @rotation.started += instance.OnRotation;
            @rotation.performed += instance.OnRotation;
            @rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(ILeftHandActions instance)
        {
            @Postion.started -= instance.OnPostion;
            @Postion.performed -= instance.OnPostion;
            @Postion.canceled -= instance.OnPostion;
            @rotation.started -= instance.OnRotation;
            @rotation.performed -= instance.OnRotation;
            @rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // RightHandLocomotion
    private readonly InputActionMap m_RightHandLocomotion;
    private List<IRightHandLocomotionActions> m_RightHandLocomotionActionsCallbackInterfaces = new List<IRightHandLocomotionActions>();
    private readonly InputAction m_RightHandLocomotion_Turn;
    public struct RightHandLocomotionActions
    {
        private @PlayerInputAction m_Wrapper;
        public RightHandLocomotionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_RightHandLocomotion_Turn;
        public InputActionMap Get() { return m_Wrapper.m_RightHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandLocomotionActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
        }

        private void UnregisterCallbacks(IRightHandLocomotionActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
        }

        public void RemoveCallbacks(IRightHandLocomotionActions instance)
        {
            if (m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandLocomotionActions @RightHandLocomotion => new RightHandLocomotionActions(this);

    // LeftHandLocomotion
    private readonly InputActionMap m_LeftHandLocomotion;
    private List<ILeftHandLocomotionActions> m_LeftHandLocomotionActionsCallbackInterfaces = new List<ILeftHandLocomotionActions>();
    private readonly InputAction m_LeftHandLocomotion_Move;
    public struct LeftHandLocomotionActions
    {
        private @PlayerInputAction m_Wrapper;
        public LeftHandLocomotionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LeftHandLocomotion_Move;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandLocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ILeftHandLocomotionActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ILeftHandLocomotionActions instance)
        {
            if (m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandLocomotionActions @LeftHandLocomotion => new LeftHandLocomotionActions(this);

    // RightHandInterction
    private readonly InputActionMap m_RightHandInterction;
    private List<IRightHandInterctionActions> m_RightHandInterctionActionsCallbackInterfaces = new List<IRightHandInterctionActions>();
    private readonly InputAction m_RightHandInterction_Select;
    private readonly InputAction m_RightHandInterction_Activate;
    private readonly InputAction m_RightHandInterction_UIPress;
    private readonly InputAction m_RightHandInterction_Jump;
    public struct RightHandInterctionActions
    {
        private @PlayerInputAction m_Wrapper;
        public RightHandInterctionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_RightHandInterction_Select;
        public InputAction @Activate => m_Wrapper.m_RightHandInterction_Activate;
        public InputAction @UIPress => m_Wrapper.m_RightHandInterction_UIPress;
        public InputAction @Jump => m_Wrapper.m_RightHandInterction_Jump;
        public InputActionMap Get() { return m_Wrapper.m_RightHandInterction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandInterctionActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandInterctionActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandInterctionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandInterctionActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IRightHandInterctionActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IRightHandInterctionActions instance)
        {
            if (m_Wrapper.m_RightHandInterctionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandInterctionActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandInterctionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandInterctionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandInterctionActions @RightHandInterction => new RightHandInterctionActions(this);

    // LeftHandInterction
    private readonly InputActionMap m_LeftHandInterction;
    private List<ILeftHandInterctionActions> m_LeftHandInterctionActionsCallbackInterfaces = new List<ILeftHandInterctionActions>();
    private readonly InputAction m_LeftHandInterction_Select;
    private readonly InputAction m_LeftHandInterction_Activate;
    private readonly InputAction m_LeftHandInterction_UIPress;
    public struct LeftHandInterctionActions
    {
        private @PlayerInputAction m_Wrapper;
        public LeftHandInterctionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_LeftHandInterction_Select;
        public InputAction @Activate => m_Wrapper.m_LeftHandInterction_Activate;
        public InputAction @UIPress => m_Wrapper.m_LeftHandInterction_UIPress;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandInterction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandInterctionActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandInterctionActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandInterctionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandInterctionActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
        }

        private void UnregisterCallbacks(ILeftHandInterctionActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
        }

        public void RemoveCallbacks(ILeftHandInterctionActions instance)
        {
            if (m_Wrapper.m_LeftHandInterctionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandInterctionActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandInterctionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandInterctionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandInterctionActions @LeftHandInterction => new LeftHandInterctionActions(this);
    public interface IHeadActions
    {
        void OnPostion(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnPostion(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnPostion(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IRightHandLocomotionActions
    {
        void OnTurn(InputAction.CallbackContext context);
    }
    public interface ILeftHandLocomotionActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IRightHandInterctionActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
        void OnUIPress(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ILeftHandInterctionActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
        void OnUIPress(InputAction.CallbackContext context);
    }
}
